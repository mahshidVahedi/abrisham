<?php

namespace backend\models;

use Yii;
use yii\data\ActiveDataProvider;

/**
 * This is the model class for table "{{%comment}}".
 *
 * @property int $id
 * @property string $comment
 * @property int $comment_id
 * @property int $content_id
 * @property int $user_id
 * @property string $create_date
 * @property string $update_date
 * @property int $job_detail_id
 * @property int $is_ok
 * @property int $is_disable
 * @property int $temp_id
 */
class Comment extends \yii\db\ActiveRecord
{
	public $recordType; // use for global Gird IN Users/Events BY KHajeHosseini
	public $recordTitle;
	public $recordContent;
	public $oldAttr;
    const SCENARIO_GALLERY = 'gallery';
   /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return '{{%comment}}';
    }

    /**
     * {@inheritdoc}
     */





    public function rules()
    {
        return [
            [['comment', 'content_id', 'user_id'], 'required' , 'except' => [self::SCENARIO_GALLERY]],
            [['content_id', 'user_id'], 'required' , 'on' => [self::SCENARIO_GALLERY]],
            [['comment'], 'string'],
            [['comment_id', 'content_id', 'user_id', 'job_detail_id', 'is_ok', 'is_disable', 'temp_id'], 'integer'],
            [['create_date', 'update_date' ], 'safe'],
        ];
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        if(empty($this->oldAttr['id'])){
            $this->content->comment_count = $this->content->comment_count+1;
        }
        elseif($this->is_disable and !$this->oldAttr['is_disable']){
            $this->content->comment_count = $this->content->comment_count ? $this->content->comment_count-1 : 0;
        }
        $this->content->scenario = 'chat';
        $this->content->save();
    }


    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
//        $this->comment = Yii::$app->fstring->CSRDetector($this->comment);
        $this->oldAttr = $this->attributes;
    }

    public function chatMessage($params)
    {
        $query = Comment::find();

        // add conditions that should always apply here
        $query->joinWith(['content c' , 'profile p'])->where(['c.cat_id' => 7 , 'c.organization_id' => yii::$app->fcore->getOrganization()]);
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);
//        $dataProvider->sort->attributes['profile'] = [
//            'asc' => ['p.lname' => SORT_ASC , 'p.name' => SORT_ASC],
//            'desc' => ['p.lname' => SORT_DESC , 'p.name' => SORT_DESC],
//        ];
//        $this->load($params['Comment']);
//        if (!$this->validate()) {
//            // uncomment the following line if you do not want to return any records when validation fails
//            // $query->where('0=1');
//            return $dataProvider;
//        }

        // grid filtering conditions
        $query->andFilterWhere([
            'id' => $this->id,
        ]);
        $query->andFilterWhere(['is_disable' => $this->is_disable]);
        $query->andFilterWhere(['like', 'comment', $this->comment]);
        $query->andFilterWhere(['like', 'concat(p.name , " " , p.lname)', $this->user_id]);
        $query->andFilterWhere(['like', 'c.title', $this->content_id]);
//        $query->andFilterWhere(['IN', 'organization_id', array_keys(yii::$app->fcore->getAllOrganization())]);

        return $dataProvider;
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'comment' => Yii::t('app', 'Comment'),
            'comment_id' => Yii::t('app', 'Comment ID'),
            'content_id' => Yii::t('app', 'Content ID'),
            'user_id' => Yii::t('app', 'User ID'),
            'create_date' => Yii::t('app', 'Create Date'),
            'update_date' => Yii::t('app', 'Update Date'),
            'job_detail_id' => Yii::t('app', 'Job Detail ID'),
            'is_ok' => Yii::t('app', 'Is Ok'),
            'is_disable' => Yii::t('app', 'Is Disable'),
        ];
    }
	public static function getNewMessage(){
        $newMessage = Yii::$app->db->createCommand("
                        select sum(t.count) as `count` , sum(is_reply) as is_has_reply from tbl_chat_new_message_count t
                        inner join tbl_contents c on c.id = t.content_id and c.is_delete = 0
                        WHERE t.organization_id = :org_id and t.user_id = :user_id
                    ")
            ->bindValue(':user_id', Yii::$app->user->id)
            ->bindValue(':org_id', Yii::$app->fcore->getOrganization())
            ->queryAll();
        if($newMessage){
            return $newMessage[0];
        }
	}
	public static function getFiles($id){
        $files = Files::find()->where(['comment_id' => $id , 'files_type_id' => 18])->all();
        if($files){
            return $files;
        }
        return [];
	}
	public function getContent(){
		return $this->hasOne(Contents::className(),['id'=>'content_id']);
	}
	public function getSink(){
		return $this->hasMany(Contents::className(),['id'=>'comment_id']);
	}
	public function getProfile(){
		return $this->hasOne(Profiles::className(),['user_id'=>'user_id']);
	}
}